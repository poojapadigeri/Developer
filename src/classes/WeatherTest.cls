public class WeatherTest {

	public class Weather {
		public Integer id {get;set;} 
		public String main {get;set;} 
		public String description {get;set;} 
		public String icon {get;set;} 

		public Weather(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'main') {
							main = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'icon') {
							icon = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Weather consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Coord {
		public Double lon {get;set;} 
		public Double lat {get;set;} 

		public Coord(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lon') {
							lon = parser.getDoubleValue();
						} else if (text == 'lat') {
							lat = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Coord consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Wind {
		public Double speed {get;set;} 
		public Integer deg {get;set;} 

		public Wind(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'speed') {
							speed = parser.getDoubleValue();
						} else if (text == 'deg') {
							deg = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Wind consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Clouds {
		public Integer all {get;set;} 

		public Clouds(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'all') {
							all = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Clouds consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Coord coord {get;set;} 
	public List<Weather> weather {get;set;} 
	public String base {get;set;} 
	public Main main {get;set;} 
	public Integer visibility {get;set;} 
	public Wind wind {get;set;} 
	public Clouds clouds {get;set;} 
	public Integer dt {get;set;} 
	public Sys sys {get;set;} 
	public Integer id {get;set;} 
	public String name {get;set;} 
	public Integer cod {get;set;} 

	public WeatherTest(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            //System.debug(parser.nextToken() +' ' + System.JSONToken.END_OBJECT);
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'coord') {
						coord = new Coord(parser);
					} else if (text == 'weather') {
						weather = arrayOfWeather(parser);
					} else if (text == 'base') {
						base = parser.getText();
					} else if (text == 'main') {
						main = new Main(parser);
					} else if (text == 'visibility') {
						visibility = parser.getIntegerValue();
					} else if (text == 'wind') {
						wind = new Wind(parser);
					} else if (text == 'clouds') {
						clouds = new Clouds(parser);
					} else if (text == 'dt') {
						dt = parser.getIntegerValue();
					} else if (text == 'sys') {
						sys = new Sys(parser);
					} else if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'cod') {
						cod = parser.getIntegerValue();
					} else {
						System.debug(LoggingLevel.WARN, 'TestWhether consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Sys {
		public Integer type_Z {get;set;} // in json: type
		public Integer id {get;set;} 
		public Double message {get;set;} 
		public String country; //{get;set;} 
		public Integer sunrise {get;set;} 
		public Integer sunset {get;set;} 

		public Sys(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getIntegerValue();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'message') {
							message = parser.getDoubleValue();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'sunrise') {
							sunrise = parser.getIntegerValue();
						} else if (text == 'sunset') {
							sunset = parser.getIntegerValue();
                            System.debug(sunset);
						} else {
							System.debug(LoggingLevel.WARN, 'Sys consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Main {
		public Double temp {get;set;} 
		public Integer pressure {get;set;} 
		public Integer humidity {get;set;} 
		public Double temp_min {get;set;} 
		public Double temp_max {get;set;} 

		public Main(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'temp') {
							temp = parser.getDoubleValue();
						} else if (text == 'pressure') {
							pressure = parser.getIntegerValue();
						} else if (text == 'humidity') {
							humidity = parser.getIntegerValue();
						} else if (text == 'temp_min') {
							temp_min = parser.getDoubleValue();
						} else if (text == 'temp_max') {
							temp_max = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Main consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WeatherTest parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WeatherTest(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Weather> arrayOfWeather(System.JSONParser p) {
        List<Weather> res = new List<Weather>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Weather(p));
        }
        return res;
    }
	
    public void InsertValues()
    {
        String JSONContent = String.valueOf(WeatherTestCall.callout().getBody());
		JSONParser parser = JSON.createParser(JSONContent);
		
        OpenWeatherMapObject__c w = new OpenWeatherMapObject__c();
        w.cname__c = name;
        w.humidity__c = Main.humidity;
        w.lat__c = Coord.lat;
        w.lon__c = Coord.lon;
        w.temperature__c = Main.temp;
        w.wind_degree__c = Wind.deg;
        w.wind_speed__c = Wind.speed;
        
    	List<OpenWeatherMapObject__c> cities=[select cname__c from OpenWeatherMapObject__c];
        Integer i=0;
        try{
        for(OpenWeatherMapObject__c ct : cities ){
            if(ct.cname__c == name){
                ct.cname__c = Sys.country;
        ct.humidity__c = Main.humidity;
        ct.lat__c = Coord.lat;
        ct.lon__c = 70.7;
        ct.temperature__c = Main.temp;
        ct.wind_degree__c = Wind.deg;
        ct.wind_speed__c = Wind.speed;
                update ct;
                i=1;
                break;
            }
           
        }
        if(i==0){
            insert w;
        }
       } catch(Exception e) {
    	System.debug('An unexpected error has occurred: ' + e.getMessage());
		}

    }

}